
---

# –í–µ–±-—Å–µ—Ä–≤–∏—Å –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

![FastAPI](https://img.shields.io/badge/FastAPI-005571?style=for-the-badge&logo=fastapi)
![TensorFlow](https://img.shields.io/badge/TensorFlow-FF6F00?style=for-the-badge&logo=tensorflow&logoColor=white)

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –≤–µ–±-—Å–µ—Ä–≤–∏—Å –Ω–∞ FastAPI, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç:
1. –°–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
2. –ú–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä –Ω–∞ –±–∞–∑–µ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö MNIST

## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞

- üõí **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏**: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
- üî¢ **–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ü–∏—Ñ—Ä**: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
- ‚ö° **FastAPI**: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è API
- ü§ñ **TensorFlow/Keras**: –ì–ª—É–±–æ–∫–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- üìä **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤**: –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
```bash
pip install fastapi uvicorn tensorflow numpy requests python-multipart
```

2. –û–±—É—á–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å MNIST (–≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑):
```python
# train_model.py
import tensorflow as tf
from tensorflow import keras
import numpy as np

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
mnist = keras.datasets.mnist
(X_train, y_train), (X_test, y_test) = mnist.load_data()
X_train = X_train.astype('float32') / 255
X_test = X_test.astype('float32') / 255
X_train = np.expand_dims(X_train, axis=-1)
X_test = np.expand_dims(X_test, axis=-1)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28,1)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X_train, y_train, epochs=5, validation_split=0.1)
model.save('model.h5')
```

3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:
```bash
uvicorn main:app --reload
```

–°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:8000

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API

### üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏

**–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:**
```bash
POST /items/
{
    "name": "–Ø–±–ª–æ–∫–æ",
    "category": "–ü—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ",
    "price": 50.0,
    "unit": "–∫–≥",
    "quantity": 2
}
```

**–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã:**
```bash
GET /items/
```

**–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**
```bash
GET /expenses/
```

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
```json
{
  "–ü—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ": 350.0,
  "total": 350.0
}
```

### üî¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ü–∏—Ñ—Ä

**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
```bash
POST /predict
[
  [[0,0,0,...,0], [0,0,0,...,0], ...], // 28x28
  [[0,0,0,...,0], [0,0,0,...,0], ...]  // –µ—â—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
]
```

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
```json
{
  "prediction": [
    [0.01, 0.02, ..., 0.85], // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è 10 –∫–ª–∞—Å—Å–æ–≤
    [0.10, 0.05, ..., 0.70]
  ]
}
```

### –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤

–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ Python:
```python
import requests

url = "http://127.0.0.1:8000/items/"
item_data = {
    "name": "–ê—Ä–±—É–∑",
    "category": "–ü—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ",
    "price": 26.0,
    "unit": "–∫–≥",
    "quantity": 10
}
response = requests.post(url, json=item_data)
print(response.json())
```

–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
```python
import requests
import numpy as np

url = "http://127.0.0.1:8000/predict"
data = np.random.randint(0, 256, (5, 28, 28)).tolist()
response = requests.post(url, json=data)
print(response.json())
```

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
project/
‚îú‚îÄ‚îÄ main.py            # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ model.h5           # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å TensorFlow
‚îú‚îÄ‚îÄ train_model.py     # –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
‚îú‚îÄ‚îÄ requirements.txt   # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
‚îî‚îÄ‚îÄ README.md          # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
```

## –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

- **FastAPI** - –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API
- **TensorFlow/Keras** - —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
- **Pydantic** - –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
- **NumPy** - —Ä–∞–±–æ—Ç–∞ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- **UVicorn** - ASGI-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

---

–≠—Ç–æ—Ç README –¥–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞, –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏—Ü–µ–Ω–∑–∏–∏, –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∞–≤—Ç–æ—Ä–∞, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å API —á–µ—Ä–µ–∑ Swagger UI (–∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://127.0.0.1:8000/docs –ø—Ä–∏ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ).
